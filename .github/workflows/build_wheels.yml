name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
        #- os: ubuntu-latest
        #  python: 38
        #  bitness: 64
        #  platform_id: manylinux_x86_64
        #  #manylinux_2_24
        #  manylinux_image: lubo1994/mv-extractor:latest
        #- os: ubuntu-latest
        #  python: 39
        #  bitness: 64
        #  platform_id: manylinux_x86_64
        #  manylinux_image: lubo1994/mv-extractor:latest
        - os: ubuntu-latest
          python: 310
          bitness: 64
          platform_id: manylinux_x86_64
          manylinux_image: lubo1994/mv-extractor:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.1
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          # Disable building PyPy wheels on all platforms
          CIBW_SKIP: pp*
          CIBW_ARCHS: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          #CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_BUILD_FRONTEND: build
          CIBW_TEST_COMMAND: VIDEO_URL={project}/vid.mp4 python3 {project}/tests/tests.py
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   # upload to PyPI on every tag starting with 'v'
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   # alternatively, to publish when a GitHub Release is created, use the following rule:
  #   # if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         # unpacks default artifact into dist/
  #         # if `name: artifact` is omitted, the action will create extra parent dir
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.5.0
  #       with:
  #         user: __token__
  #         password: ${{ secrets.pypi_password }}
  #         # To test: repository_url: https://test.pypi.org/legacy/